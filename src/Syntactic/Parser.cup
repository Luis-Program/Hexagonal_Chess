package Syntactic;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import main.java.Class.Token;
import main.java.Class.Command;
import main.java.Class.ListCommand;
import java.util.ArrayList;
//Nueva
import main.java.com.mycompany.chess.Jframe.chessHex;

parser code 
{:
    chessHex ClassChes;
    public Parser(chessHex C,java_cup.runtime.Scanner s){
    super(s);
    this.ClassChes = C;
    }
   
 
    public void syntax_error(Symbol s){ 
       JOptionPane.showMessageDialog(null,"Error de Sintaxis: "+s);
    }   

:}

action code {:
    
:}
terminal Token integer, erase, plus, per, split, bracket_open, bracket_close, quotes,i_f,el_se,then,end_if,dot,comma,semicolon,higher,less,ehigher,eless,equal,distinct,posx,posy,name,move,moveto,movetoward,moveawayfrom,stats,donothing,giveup,piecename;

non terminal Integer A, B, C,K;
non terminal Boolean D;
non terminal Command G, I;
non terminal ListCommand L, E, H, S;

start with S;


//________________________Produccion S__________________________________________

S ::= H:list {: parser.ClassChes.DoActions(list); :};

//_______________________Comando o IF o atributo________________________________
//__________________________Produccion H________________________________________

H::= L:list {: RESULT = list; :}
    
    | E:list {:RESULT = list;:}
    
    | H:list1 E:list2 {: ArrayList<Command> li = new ArrayList<Command>();
                li.addAll(list1.getListCommand()); li.addAll(list2.getListCommand()); 
                ListCommand l = new ListCommand(li);
                RESULT = l; :};

//_______________________________IF_____________________________________________

//__________________________Produccion E________________________________________

E::=  i_f bracket_open D:bool1 bracket_close then L:listF    

      el_se L:listL end_if  {:
                            if (bool1){
                                RESULT = listF;
                                 }else{
                                    RESULT =listL;
                                       }:}

    | i_f bracket_open D:bool2 bracket_close then L:list end_if    
        {: if(bool2){ RESULT = list;      
                                }else{
         ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li);   RESULT = l;}  :}

  
    | i_f bracket_open D:bool3 bracket_close then E:listif end_if    
        {: if(bool3){ RESULT = listif;      
                                }else{
         ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li);   RESULT = l;}  :}


    | i_f bracket_open D:bool4 bracket_close then E:listF    

      el_se E:listL end_if  {:
                            if (bool4){
                                RESULT = listF;
                                 }else{
                                    RESULT =listL;
                                       }:}


    | i_f bracket_open D:bool9 bracket_close then L:list    

      el_se E:listL end_if  {:
                            if (bool9){
                             RESULT = list;
                                 }else{
                                    RESULT =listL;
                                       }:}


     | i_f bracket_open D:bool bracket_close then L:list E:q end_if   
        {:
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                   ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li); RESULT = l;} 
            :}


    | i_f bracket_open D:bool bracket_close then L:list E:q el_se L:list2 E:q2 end_if  
        {:
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                    ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list2.getListCommand()); li.addAll(q2.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;} 
            :}


    
    | i_f bracket_open D:bool bracket_close then E:q L:list end_if   
        {:
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                   ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li); RESULT = l;} 
            :}

    | i_f bracket_open D:bool bracket_close then E:q L:list  el_se E:q2 L:list2  end_if  
        {:
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                    ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list2.getListCommand()); li.addAll(q2.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;} 
            :}


    | i_f bracket_open D:bool bracket_close then L:list1 E:q L:list2 end_if   
        {:
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list1.getListCommand()); li.addAll(q.getListCommand()); li.addAll(list2.getListCommand());
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                   ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li); RESULT = l;} 
            :}

    
    | i_f bracket_open D:bool bracket_close then L:list1 E:q L:list2  el_se L:list3 E:q2 L:list4  end_if  
        {:
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list1.getListCommand()); li.addAll(q.getListCommand()); li.addAll(list2.getListCommand());
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                    ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list3.getListCommand()); li.addAll(q2.getListCommand()); li.addAll(list4.getListCommand());
                ListCommand l = new ListCommand(li); RESULT = l;} 
            :}

    
;


      

//__________________________Lista Comandos de Movi_____________________________(Movimientos, Atributos)

//__________________________Produccion L________________________________________

L ::= L:list G:c  {: ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.add(c); ListCommand l = new ListCommand(li); RESULT = l;  :}

    | G:c {: ArrayList<Command> list = new ArrayList<Command>();  list.add(c);  ListCommand l = new ListCommand(list);  RESULT = l; :}

    | L:list I:c  {: ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.add(c); ListCommand l = new ListCommand(li); RESULT = l;  :}

    | I:c  {: ArrayList<Command> list = new ArrayList<Command>();  list.add(c);  ListCommand l = new ListCommand(list);  RESULT = l; :};

//_____________________________Comandos Movimientos_____________________________

//__________________________Produccion G________________________________________

G ::= piecename:p dot move bracket_open A:x comma A:y bracket_close semicolon {:Command c = new Command(p.getString(),3,x,y);  RESULT = c;:}

    | piecename:p dot moveto bracket_open quotes piecename:newname quotes bracket_close semicolon {:Command c = new Command(p.getString(),4,newname.getString());  RESULT = c;:}

    | piecename:p dot movetoward bracket_open quotes piecename:toname quotes comma A:x bracket_close semicolon {:Command c = new Command(p.getString(),5,toname.getString(),x);  RESULT = c;:}

    | piecename:p dot moveawayfrom bracket_open quotes piecename:toname quotes comma A:x bracket_close semicolon {:Command c = new Command(p.getString(),6,toname.getString(),x);  RESULT = c;:}

//___________________________Production Error Semicolon_______________________________
    | piecename:p dot move bracket_open A:x comma A:y bracket_close{:Command c = new Command(p.getString()+".Move("+x+","+y+")",10);  RESULT = c;:}

    | piecename:p dot moveto bracket_open quotes piecename:newname quotes bracket_close {:Command c = new Command(p.getString()+".MoveTo("+newname.toString()+")",10);  RESULT = c;:}

    | piecename:p dot movetoward bracket_open quotes piecename:toname quotes comma A:x bracket_close {:Command c = new Command(p.getString()+".MoveToward("+toname.toString()+","+x+")",10);  RESULT = c;:}

    | piecename:p dot moveawayfrom bracket_open quotes piecename:toname quotes comma A:x bracket_close  {:Command c = new Command(p.getString()+".MoveAwayFrom("+toname.toString()+","+x+")",10);  RESULT = c;:}

//_________________________Production Error dot comma___________________________

    |piecename:p dot move bracket_open A:x dot A:y bracket_close semicolon{:Command c = new Command(p.getString()+".Move("+x+"(-->.<--)"+y+")",11);  RESULT = c;:}

    | piecename:p dot movetoward bracket_open quotes piecename:toname quotes dot A:x bracket_close semicolon{:Command c = new Command(p.getString()+".MoveToward("+toname.toString()+"(-->.<--)"+x+")",11);  RESULT = c;:}

    | piecename:p dot moveawayfrom bracket_open quotes piecename:toname quotes dot A:x bracket_close semicolon {:Command c = new Command(p.getString()+".MoveAwayFrom("+toname.toString()+"(-->.<--)"+x+")",11);  RESULT = c;:}

;

//_____________________________Condiciones______________________________________

//__________________________Produccion D________________________________________

D ::= A:num1 equal A:num2 {: 
                                if( num1 == num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;} 
                          :}

    | A:num1 distinct A:num2 {: 
                                if( num1 != num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;} 
                             :}

    | A:num1 ehigher A:num2 {: 
                                if( num1 >= num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;}
                            :}

    | A:num1 eless A:num2 {: 
                                if( num1 <= num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;}
                          :}

    | A:num1 higher A:num2 {: 
                                if( num1 > num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;} 
                            :}

    | A:num1 less A:num2 {: 
                            if( num1 < num2 ){
                                RESULT = true;
                            }else{
                                RESULT = false;}
                          :};


//______________________Operaciones_Aritmeticas_________________________________

//__________________________Produccion A________________________________________

A ::= A:num1 plus B:num2 {: RESULT = (num1 + num2); :}

    | A:num1 erase B:num2 {: RESULT = (num1 - num2); :}

    | B:num {: RESULT = num ; :};

//__________________________Produccion B________________________________________

 B ::= B:num1 per C:num2 {: RESULT = (num1 * num2); :}
    
    | B:num1 split C:num2  {: RESULT = (num1 / num2 ); :}
    
    | C:num  {: RESULT = num; :} ;

//__________________________Produccion C________________________________________

C ::= bracket_open A:num bracket_close  {: RESULT = num ;:}

    | integer:num {:  RESULT = num.toInteger();  :}

    | K:c {:RESULT = c; :};


//__________________________Produccion I________________________________________

I ::=  stats bracket_open bracket_close semicolon {:Command c = new Command(7);  RESULT = c; :}

    | piecename:p dot posx bracket_open bracket_close semicolon {:Command c = new Command(p.getString(), 1);  RESULT = c;:}

    |  piecename:p dot posy bracket_open bracket_close semicolon {:Command c = new Command(p.getString(), 0);  RESULT = c;:}

    | donothing bracket_open bracket_close semicolon {:Command c = new Command(8);  RESULT = c;:}

    | giveup bracket_open bracket_close semicolon {:Command c = new Command(9);  RESULT = c;:}

    | piecename:p dot name bracket_open quotes piecename:newp quotes bracket_close  semicolon{: 

        Command c = new Command(p.getString(),2,newp.getString());  RESULT = c;

                                                                             :}
//_______________________________Production Error_______________________________

    | stats bracket_open bracket_close {:Command c = new Command("Stats()",10);  RESULT = c; :}

    | donothing bracket_open bracket_close  {:Command c = new Command("DoNothing()",10);  RESULT = c;:}

    | giveup bracket_open bracket_close  {:Command c = new Command("GiveUp()",10);  RESULT = c;:}

    | piecename:p dot name bracket_open quotes piecename:newp quotes bracket_close {: 

        Command c = new Command(p.getString()+".Name("+newp.getString()+")",10);  RESULT = c;

                                                                             :}

;

//_______________________________Comandos Atributos_____________________________
//__________________________Produccion K________________________________________

K ::=  piecename:p dot posx bracket_open bracket_close  {:RESULT = parser.ClassChes.PosXY(p.getString(),1); :}
    
    | piecename:p dot posy bracket_open bracket_close  {: RESULT = parser.ClassChes.PosXY(p.getString(),0); :};