
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 01 14:02:26 CST 2021
//----------------------------------------------------

package Syntactic;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import main.java.Class.Token;
import main.java.Class.Command;
import main.java.Class.ListCommand;
import java.util.ArrayList;
import main.java.com.mycompany.chess.Jframe.chessHex;

/** CUP v0.10k generated parser.
  * @version Tue Jun 01 14:02:26 CST 2021
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\015\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\004\000\002\013\013" +
    "\000\002\013\011\000\002\013\011\000\002\013\013\000" +
    "\002\013\013\000\002\013\012\000\002\013\015\000\002" +
    "\013\012\000\002\013\015\000\002\013\013\000\002\013" +
    "\017\000\002\012\004\000\002\012\003\000\002\012\004" +
    "\000\002\012\003\000\002\010\013\000\002\010\013\000" +
    "\002\010\015\000\002\010\015\000\002\010\012\000\002" +
    "\010\012\000\002\010\014\000\002\010\014\000\002\010" +
    "\013\000\002\010\015\000\002\010\015\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\011\006\000\002\011\010\000" +
    "\002\011\010\000\002\011\006\000\002\011\006\000\002" +
    "\011\013\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\012\000\002\006\007\000\002\006\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\014\014\006\040\010\041\012\042\004\043" +
    "\005\001\002\000\004\011\234\001\002\000\004\020\140" +
    "\001\002\000\004\011\031\001\002\000\004\002\030\001" +
    "\002\000\004\011\025\001\002\000\016\002\uffff\014\uffff" +
    "\040\010\041\012\042\004\043\005\001\002\000\004\011" +
    "\020\001\002\000\022\002\uffee\014\uffee\015\uffee\017\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\001\002\000\006\002" +
    "\000\014\006\001\002\000\022\002\ufff0\014\ufff0\015\ufff0" +
    "\017\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\001\002\000" +
    "\006\002\ufffe\014\ufffe\001\002\000\006\002\ufffd\014\ufffd" +
    "\001\002\000\004\012\021\001\002\000\024\002\uffcc\014" +
    "\uffcc\015\uffcc\017\uffcc\022\022\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\001\002\000\022\002\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000\022" +
    "\002\uffef\014\uffef\015\uffef\017\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\001\002\000\022\002\ufff1\014\ufff1\015\ufff1" +
    "\017\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\001\002\000" +
    "\004\012\026\001\002\000\024\002\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\022\027\040\uffcd\041\uffcd\042\uffcd\043\uffcd\001" +
    "\002\000\022\002\uffd3\014\uffd3\015\uffd3\017\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\001\002\000\004\002\001\001" +
    "\002\000\010\004\035\011\036\043\033\001\002\000\022" +
    "\005\111\006\112\023\125\024\126\025\124\026\127\027" +
    "\131\030\130\001\002\000\004\020\115\001\002\000\034" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\020\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\001\002\000\034\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012" +
    "\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\001\002\000\010\004\035\011\036\043" +
    "\033\001\002\000\004\012\046\001\002\000\034\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\012\uffd7\020\uffd7\021\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\001\002" +
    "\000\034\005\uffda\006\uffda\007\042\010\043\012\uffda\020" +
    "\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\001\002\000\010\004\035\011\036\043\033\001" +
    "\002\000\010\004\035\011\036\043\033\001\002\000\034" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\020\uffd8\021" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\001\002\000\034\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\001\002\000\004\016\047\001\002\000" +
    "\014\014\006\040\010\041\012\042\004\043\005\001\002" +
    "\000\020\014\006\015\065\017\064\040\010\041\012\042" +
    "\004\043\005\001\002\000\016\015\053\017\052\040\010" +
    "\041\012\042\004\043\005\001\002\000\022\002\ufffa\014" +
    "\ufffa\015\ufffa\017\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\001\002\000\004\014\006\001\002\000\016\015\055\017" +
    "\056\040\010\041\012\042\004\043\005\001\002\000\004" +
    "\014\006\001\002\000\022\002\ufff5\014\ufff5\015\ufff5\017" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\001\002\000\012" +
    "\040\010\041\012\042\004\043\005\001\002\000\014\017" +
    "\061\040\010\041\012\042\004\043\005\001\002\000\022" +
    "\002\ufff4\014\ufff4\015\ufff4\017\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\001\002\000\004\017\063\001\002\000\022" +
    "\002\ufff9\014\ufff9\015\ufff9\017\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\001\002\000\022\002\ufffb\014\ufffb\015\ufffb" +
    "\017\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000" +
    "\014\014\006\040\010\041\012\042\004\043\005\001\002" +
    "\000\016\015\070\017\067\040\010\041\012\042\004\043" +
    "\005\001\002\000\022\002\ufff7\014\ufff7\015\ufff7\017\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\001\002\000\012\040" +
    "\010\041\012\042\004\043\005\001\002\000\016\015\072" +
    "\017\073\040\010\041\012\042\004\043\005\001\002\000" +
    "\012\040\010\041\012\042\004\043\005\001\002\000\022" +
    "\002\ufff3\014\ufff3\015\ufff3\017\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\001\002\000\014\014\006\040\010\041\012" +
    "\042\004\043\005\001\002\000\012\040\010\041\012\042" +
    "\004\043\005\001\002\000\014\017\077\040\010\041\012" +
    "\042\004\043\005\001\002\000\022\002\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\001\002" +
    "\000\014\014\006\040\010\041\012\042\004\043\005\001" +
    "\002\000\004\017\102\001\002\000\022\002\ufff6\014\ufff6" +
    "\015\ufff6\017\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\001" +
    "\002\000\014\017\106\040\010\041\012\042\004\043\005" +
    "\001\002\000\004\017\105\001\002\000\022\002\ufff8\014" +
    "\ufff8\015\ufff8\017\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\001\002\000\022\002\ufffc\014\ufffc\015\ufffc\017\ufffc\040" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\010\005\111" +
    "\006\112\012\110\001\002\000\034\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\012\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\001\002\000\010\004" +
    "\035\011\036\043\033\001\002\000\010\004\035\011\036" +
    "\043\033\001\002\000\034\005\uffdc\006\uffdc\007\042\010" +
    "\043\012\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\001\002\000\034\005\uffdb\006" +
    "\uffdb\007\042\010\043\012\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\001\002\000" +
    "\006\031\116\032\117\001\002\000\004\011\122\001\002" +
    "\000\004\011\120\001\002\000\004\012\121\001\002\000" +
    "\034\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8\020\uffc8" +
    "\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\001\002\000\004\012\123\001\002\000\034\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\012\uffc9\020\uffc9\021\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\001\002" +
    "\000\010\004\035\011\036\043\033\001\002\000\010\004" +
    "\035\011\036\043\033\001\002\000\010\004\035\011\036" +
    "\043\033\001\002\000\010\004\035\011\036\043\033\001" +
    "\002\000\010\004\035\011\036\043\033\001\002\000\010" +
    "\004\035\011\036\043\033\001\002\000\010\005\111\006" +
    "\112\012\uffe2\001\002\000\010\005\111\006\112\012\uffe1" +
    "\001\002\000\010\005\111\006\112\012\uffdf\001\002\000" +
    "\010\005\111\006\112\012\uffdd\001\002\000\010\005\111" +
    "\006\112\012\uffde\001\002\000\010\005\111\006\112\012" +
    "\uffe0\001\002\000\020\031\141\032\147\033\144\034\143" +
    "\035\146\036\142\037\145\001\002\000\004\011\231\001" +
    "\002\000\004\011\215\001\002\000\004\011\203\001\002" +
    "\000\004\011\175\001\002\000\004\011\161\001\002\000" +
    "\004\011\153\001\002\000\004\011\150\001\002\000\004" +
    "\012\151\001\002\000\004\022\152\001\002\000\022\002" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\001\002\000\004\013\154\001\002\000\004\043" +
    "\155\001\002\000\004\013\156\001\002\000\004\012\157" +
    "\001\002\000\024\002\uffe8\014\uffe8\015\uffe8\017\uffe8\022" +
    "\160\040\uffe8\041\uffe8\042\uffe8\043\uffe8\001\002\000\022" +
    "\002\uffec\014\uffec\015\uffec\017\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\001\002\000\004\013\162\001\002\000\004" +
    "\043\163\001\002\000\004\013\164\001\002\000\006\020" +
    "\166\021\165\001\002\000\010\004\035\011\036\043\033" +
    "\001\002\000\010\004\035\011\036\043\033\001\002\000" +
    "\010\005\111\006\112\012\170\001\002\000\004\022\171" +
    "\001\002\000\022\002\uffe3\014\uffe3\015\uffe3\017\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\001\002\000\010\005\111" +
    "\006\112\012\173\001\002\000\024\002\uffe6\014\uffe6\015" +
    "\uffe6\017\uffe6\022\174\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\001\002\000\022\002\uffea\014\uffea\015\uffea\017\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\001\002\000\004\013\176" +
    "\001\002\000\004\043\177\001\002\000\004\013\200\001" +
    "\002\000\004\012\201\001\002\000\024\002\uffca\014\uffca" +
    "\015\uffca\017\uffca\022\202\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\001\002\000\022\002\uffce\014\uffce\015\uffce\017\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\001\002\000\010\004" +
    "\035\011\036\043\033\001\002\000\012\005\111\006\112" +
    "\020\206\021\205\001\002\000\010\004\035\011\036\043" +
    "\033\001\002\000\010\004\035\011\036\043\033\001\002" +
    "\000\010\005\111\006\112\012\210\001\002\000\004\022" +
    "\211\001\002\000\022\002\uffe5\014\uffe5\015\uffe5\017\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\001\002\000\010\005" +
    "\111\006\112\012\213\001\002\000\024\002\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\022\214\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\001\002\000\022\002\uffed\014\uffed\015\uffed\017\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\001\002\000\004\013" +
    "\216\001\002\000\004\043\217\001\002\000\004\013\220" +
    "\001\002\000\006\020\222\021\221\001\002\000\010\004" +
    "\035\011\036\043\033\001\002\000\010\004\035\011\036" +
    "\043\033\001\002\000\010\005\111\006\112\012\224\001" +
    "\002\000\004\022\225\001\002\000\022\002\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\001" +
    "\002\000\010\005\111\006\112\012\227\001\002\000\024" +
    "\002\uffe7\014\uffe7\015\uffe7\017\uffe7\022\230\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\001\002\000\022\002\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001" +
    "\002\000\004\012\232\001\002\000\004\022\233\001\002" +
    "\000\022\002\uffd2\014\uffd2\015\uffd2\017\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\001\002\000\004\012\235\001\002" +
    "\000\024\002\uffcb\014\uffcb\015\uffcb\017\uffcb\022\236\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\001\002\000\022\002\uffcf" +
    "\014\uffcf\015\uffcf\017\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\016\010\014\011\012\012\010\013\015\014" +
    "\013\015\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\023\011\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\031\004\040\005\037\006" +
    "\033\007\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\106\004" +
    "\040\005\037\006\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\044\006\033\001" +
    "\001\000\006\005\043\006\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\014\011" +
    "\012\012\047\013\050\001\001\000\010\010\023\011\022" +
    "\013\065\001\001\000\010\010\014\011\012\012\053\001" +
    "\001\000\002\001\001\000\004\013\061\001\001\000\006" +
    "\010\023\011\022\001\001\000\004\013\056\001\001\000" +
    "\002\001\001\000\010\010\014\011\012\012\057\001\001" +
    "\000\006\010\023\011\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\014\011\012\012\102\013\103\001\001\000\010\010" +
    "\014\011\012\012\070\001\001\000\002\001\001\000\010" +
    "\010\014\011\012\012\077\001\001\000\006\010\023\011" +
    "\022\001\001\000\010\010\014\011\012\012\073\001\001" +
    "\000\002\001\001\000\010\010\023\011\022\013\074\001" +
    "\001\000\010\010\014\011\012\012\075\001\001\000\006" +
    "\010\023\011\022\001\001\000\002\001\001\000\010\010" +
    "\023\011\022\013\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\023\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\113\005\037\006\033\001" +
    "\001\000\010\004\112\005\037\006\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\136\004" +
    "\040\005\037\006\033\001\001\000\012\003\135\004\040" +
    "\005\037\006\033\001\001\000\012\003\134\004\040\005" +
    "\037\006\033\001\001\000\012\003\133\004\040\005\037" +
    "\006\033\001\001\000\012\003\132\004\040\005\037\006" +
    "\033\001\001\000\012\003\131\004\040\005\037\006\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\171\004\040\005" +
    "\037\006\033\001\001\000\012\003\166\004\040\005\037" +
    "\006\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\203\004\040\005\037\006\033\001\001\000" +
    "\002\001\001\000\012\003\211\004\040\005\037\006\033" +
    "\001\001\000\012\003\206\004\040\005\037\006\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\225\004\040\005\037\006\033\001" +
    "\001\000\012\003\222\004\040\005\037\006\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    chessHex ClassChes;
    public Parser(chessHex C,java_cup.runtime.Scanner s){
    super(s);
    this.ClassChes = C;
    }
    /**
     * java JLex/Main com/mycompany/proyecto_final_automatas/Scanner.lex
     **/
      
    //x.x*.y.x*.(x|y);y*.x.(0|1)*.x;(0|1)*.1.(0|1)*;L.L*.0.0.(0|1)*;a.b.(a|b)*.b.a;
    /**
     * java java_cup/Main -parser Parser com/mycompany/proyecto_final_automatas/Parser.cup
     **/

    /**
    * M�?Štodo al que se llama autom�?�?ticamente ante alg�?�?n error sintactico.
    **/ 
 
    public void syntax_error(Symbol s){ 
       JOptionPane.showMessageDialog(null,"Error de Sintaxis: "+s);
    }   


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    

  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // K ::= piecename dot posy bracket_open bracket_close 
            {
              Integer RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = parser.ClassChes.PosXY(p.getString(),0); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*K*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // K ::= piecename dot posx bracket_open bracket_close 
            {
              Integer RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = parser.ClassChes.PosXY(p.getString(),1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*K*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // I ::= piecename dot name bracket_open quotes piecename quotes bracket_close 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int newpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int newpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token newp = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 

        Command c = new Command(p.getString()+".Name("+newp.getString()+")",10);  RESULT = c;

                                                                             
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // I ::= giveup bracket_open bracket_close 
            {
              Command RESULT = null;
		Command c = new Command("GiveUp()",10);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // I ::= donothing bracket_open bracket_close 
            {
              Command RESULT = null;
		Command c = new Command("DoNothing()",10);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // I ::= stats bracket_open bracket_close 
            {
              Command RESULT = null;
		Command c = new Command("Stats()",10);  RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // I ::= piecename dot name bracket_open quotes piecename quotes bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int newpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int newpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token newp = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 

        Command c = new Command(p.getString(),2,newp.getString());  RESULT = c;

                                                                             
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // I ::= giveup bracket_open bracket_close semicolon 
            {
              Command RESULT = null;
		Command c = new Command(9);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // I ::= donothing bracket_open bracket_close semicolon 
            {
              Command RESULT = null;
		Command c = new Command(8);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // I ::= piecename dot posy bracket_open bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Command c = new Command(p.getString(), 0);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // I ::= piecename dot posx bracket_open bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Command c = new Command(p.getString(), 1);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // I ::= stats bracket_open bracket_close semicolon 
            {
              Command RESULT = null;
		Command c = new Command(7);  RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // C ::= K 
            {
              Integer RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*C*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // C ::= integer 
            {
              Integer RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = num.toInteger();  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*C*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // C ::= bracket_open A bracket_close 
            {
              Integer RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = num ;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*C*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // B ::= C 
            {
              Integer RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = num; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*B*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // B ::= B split C 
            {
              Integer RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (num1 / num2 ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*B*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // B ::= B per C 
            {
              Integer RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (num1 * num2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*B*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // A ::= B 
            {
              Integer RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = num ; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*A*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // A ::= A erase B 
            {
              Integer RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (num1 - num2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*A*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // A ::= A plus B 
            {
              Integer RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (num1 + num2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*A*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // D ::= A less A 
            {
              Boolean RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                            if( num1 < num2 ){
                                RESULT = true;
                            }else{
                                RESULT = false;}
                          
              CUP$parser$result = new java_cup.runtime.Symbol(5/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // D ::= A higher A 
            {
              Boolean RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                if( num1 > num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;} 
                            
              CUP$parser$result = new java_cup.runtime.Symbol(5/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D ::= A eless A 
            {
              Boolean RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                if( num1 <= num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;}
                          
              CUP$parser$result = new java_cup.runtime.Symbol(5/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D ::= A ehigher A 
            {
              Boolean RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                if( num1 >= num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;}
                            
              CUP$parser$result = new java_cup.runtime.Symbol(5/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D ::= A distinct A 
            {
              Boolean RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                if( num1 != num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;} 
                             
              CUP$parser$result = new java_cup.runtime.Symbol(5/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D ::= A equal A 
            {
              Boolean RESULT = null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                                if( num1 == num2 ){
                                    RESULT = true;
                                }else{
                                    RESULT = false;} 
                          
              CUP$parser$result = new java_cup.runtime.Symbol(5/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // G ::= piecename dot moveawayfrom bracket_open quotes piecename quotes dot A bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tonameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tonameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token toname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString()+".MoveAwayFrom("+toname.toString()+"(-->.<--)"+x+")",11);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // G ::= piecename dot movetoward bracket_open quotes piecename quotes dot A bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tonameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tonameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token toname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString()+".MoveToward("+toname.toString()+"(-->.<--)"+x+")",11);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // G ::= piecename dot move bracket_open A dot A bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString()+".Move("+x+"(-->.<--)"+y+")",11);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // G ::= piecename dot moveawayfrom bracket_open quotes piecename quotes comma A bracket_close 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tonameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tonameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token toname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Command c = new Command(p.getString()+".MoveAwayFrom("+toname.toString()+","+x+")",10);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // G ::= piecename dot movetoward bracket_open quotes piecename quotes comma A bracket_close 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tonameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tonameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token toname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Command c = new Command(p.getString()+".MoveToward("+toname.toString()+","+x+")",10);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // G ::= piecename dot moveto bracket_open quotes piecename quotes bracket_close 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int newnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int newnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token newname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString()+".MoveTo("+newname.toString()+")",10);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // G ::= piecename dot move bracket_open A comma A bracket_close 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Command c = new Command(p.getString()+".Move("+x+","+y+")",10);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // G ::= piecename dot moveawayfrom bracket_open quotes piecename quotes comma A bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tonameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tonameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token toname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString(),6,toname.getString(),x);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // G ::= piecename dot movetoward bracket_open quotes piecename quotes comma A bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tonameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tonameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token toname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString(),5,toname.getString(),x);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // G ::= piecename dot moveto bracket_open quotes piecename quotes bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int newnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int newnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token newname = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Command c = new Command(p.getString(),4,newname.getString());  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // G ::= piecename dot move bracket_open A comma A bracket_close semicolon 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Command c = new Command(p.getString(),3,x,y);  RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // L ::= I 
            {
              ListCommand RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ArrayList<Command> list = new ArrayList<Command>();  list.add(c);  ListCommand l = new ListCommand(list);  RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*L*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // L ::= L I 
            {
              ListCommand RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.add(c); ListCommand l = new ListCommand(li); RESULT = l;  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*L*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // L ::= G 
            {
              ListCommand RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ArrayList<Command> list = new ArrayList<Command>();  list.add(c);  ListCommand l = new ListCommand(list);  RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*L*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // L ::= L G 
            {
              ListCommand RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.add(c); ListCommand l = new ListCommand(li); RESULT = l;  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*L*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= i_f bracket_open D bracket_close then L E L el_se L E L end_if 
            {
              ListCommand RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ListCommand list1 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ListCommand q = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListCommand list2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int list3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int list3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListCommand list3 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListCommand q2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int list4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int list4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list4 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list1.getListCommand()); li.addAll(q.getListCommand()); li.addAll(list2.getListCommand());
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                    ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list3.getListCommand()); li.addAll(q2.getListCommand()); li.addAll(list4.getListCommand());
                ListCommand l = new ListCommand(li); RESULT = l;} 
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= i_f bracket_open D bracket_close then L E L end_if 
            {
              ListCommand RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListCommand list1 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListCommand q = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list1.getListCommand()); li.addAll(q.getListCommand()); li.addAll(list2.getListCommand());
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                   ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li); RESULT = l;} 
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= i_f bracket_open D bracket_close then E L el_se E L end_if 
            {
              ListCommand RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListCommand q = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListCommand q2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                    ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list2.getListCommand()); li.addAll(q2.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;} 
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= i_f bracket_open D bracket_close then E L end_if 
            {
              ListCommand RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListCommand q = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                   ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li); RESULT = l;} 
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= i_f bracket_open D bracket_close then L E el_se L E end_if 
            {
              ListCommand RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListCommand q = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListCommand list2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand q2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                    ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list2.getListCommand()); li.addAll(q2.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;} 
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= i_f bracket_open D bracket_close then L E end_if 
            {
              ListCommand RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand q = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (bool){ ArrayList<Command> li = new ArrayList<Command>(); li.addAll(list.getListCommand()); li.addAll(q.getListCommand()); 
                ListCommand l = new ListCommand(li); RESULT = l;}else{
                   ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li); RESULT = l;} 
            
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= i_f bracket_open D bracket_close then L el_se E end_if 
            {
              ListCommand RESULT = null;
		int bool9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bool9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean bool9 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand listL = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            if (bool9){
                             RESULT = list;
                                 }else{
                                    RESULT =listL;
                                       }
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= i_f bracket_open D bracket_close then E el_se E end_if 
            {
              ListCommand RESULT = null;
		int bool4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bool4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean bool4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListCommand listF = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand listL = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            if (bool4){
                                RESULT = listF;
                                 }else{
                                    RESULT =listL;
                                       }
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= i_f bracket_open D bracket_close then E end_if 
            {
              ListCommand RESULT = null;
		int bool3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bool3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean bool3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand listif = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(bool3){ RESULT = listif;      
                                }else{
         ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li);   RESULT = l;}  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= i_f bracket_open D bracket_close then L end_if 
            {
              ListCommand RESULT = null;
		int bool2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean bool2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(bool2){ RESULT = list;      
                                }else{
         ArrayList<Command> li = new ArrayList<Command>();ListCommand l = new ListCommand(li);   RESULT = l;}  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= i_f bracket_open D bracket_close then L el_se L end_if 
            {
              ListCommand RESULT = null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean bool1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListCommand listF = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand listL = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            if (bool1){
                                RESULT = listF;
                                 }else{
                                    RESULT =listL;
                                       }
              CUP$parser$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // H ::= H E 
            {
              ListCommand RESULT = null;
		int list1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand list1 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCommand list2 = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ArrayList<Command> li = new ArrayList<Command>();
                li.addAll(list1.getListCommand()); li.addAll(list2.getListCommand()); 
                ListCommand l = new ListCommand(li);
                RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*H*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // H ::= E 
            {
              ListCommand RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = list;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*H*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // H ::= L 
            {
              ListCommand RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*H*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= H 
            {
              ListCommand RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCommand list = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ClassChes.DoActions(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListCommand start_val = (ListCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

